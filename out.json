{
    "LICENSE": "MIT License\n\nCopyright (c) 2025 Pt. Prashant tripathi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
    ".prettierignore": "# Project-specific folders/files\npublic/database\n*.se1\n*.webmanifest\n*.ico\n*.png\n\n# Source files to ignore for formatting\n*.c\n*.csv\n*.h\n*.ipynb\n*.min.js\n*.py\n*.txt\n\n# Ignore editor and config files\n.editorconfig\n.gitattributes\n.gitignore\n.prettierignore\n\n# Dependencies and build artifacts\nnode_modules\ndist\nout\nbuild\n\n# Testing\ncoverage\n\n# OS/system files\n.DS_Store\nThumbs.db\nehthumbs.db\n*.pem\n\n# Changelog\nCHANGELOG.md\n\n# Lock files\npackage-lock.json",
    ".editorconfig": "# .editorconfig\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\nmax_line_length = off\ntrim_trailing_whitespace = false\n",
    "README.md": "# \ud83d\udcd0 fixed-length-array\n\nA tiny and type-safe TypeScript utility to create and work with **fixed-length\narrays (tuples)**. Automatically trims or pads input arrays at runtime, while\noffering compile-time safety using TypeScript's type system.\n\n## \u2728 Features\n\n- \u2705 Enforces fixed-length array types (tuples)\n- \ud83e\udde0 Type-safe construction\n- \ud83d\udd27 Automatically trims or pads at runtime\n- \ud83d\udce6 Tiny, no dependencies\n- \ud83d\udd01 Works in both Node.js and browser environments (ESM only)\n\n## \ud83d\ude80 Usage\n\n```ts\nimport { toFixedLengthArray, FixedLengthArray } from 'fixed-length-array';\n\n// Pads to a fixed length of 3\nconst vec3 = toFixedLengthArray([1], 3, 0);\n// Result: [1, 0, 0]\n\n// Trims if input is longer\nconst trimmed = toFixedLengthArray([1, 2, 3, 4, 5], 3, 0);\n// Result: [1, 2, 3]\n\n// Full type support\ntype Vec3 = FixedLengthArray<3, number>;\n```\n\n## \ud83e\uddea API\n\n### `toFixedLengthArray<T, N>(input: T[], fixedLength: N, defaultValue: T): FixedLengthArray<N, T>`\n\nCreates a fixed-length array by trimming or padding the input.\n\n### `type FixedLengthArray<N, T>`\n\nA recursive type that represents a tuple of length `N`, with all elements of\ntype `T`.\n",
    ".gitignore": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\npackage-lock.json\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.*\n!.env.example\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n.cache\n\n# Sveltekit cache directory\n.svelte-kit/\n\n# vitepress build output\n**/.vitepress/dist\n\n# vitepress cache directory\n**/.vitepress/cache\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# Firebase cache directory\n.firebase/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v3\n.pnp.*\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/sdks\n!.yarn/versions\n\n# Vite logs files\nvite.config.js.timestamp-*\nvite.config.ts.timestamp-*\n\n",
    "package.json": "{\n    \"name\": \"fixed-length-array\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A tiny and type-safe TypeScript utility to create and work with fixed-length arrays (tuples).\",\n    \"keywords\": [\n        \"typescript\",\n        \"utility\",\n        \"array\",\n        \"tuple\",\n        \"fixed-length\",\n        \"typesafe\"\n    ],\n    \"homepage\": \"https://github.com/ptprashanttripathi/fixed-length-array\",\n    \"bugs\": {\n        \"url\": \"https://github.com/ptprashanttripathi/fixed-length-array/issues\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/ptprashanttripathi/fixed-length-array.git\"\n    },\n    \"license\": \"MIT\",\n    \"author\": {\n        \"name\": \"Pt. Prashant Tripathi\",\n        \"url\": \"https://github.com/ptprashanttripathi\",\n        \"githubUsername\": \"ptprashanttripathi\"\n    },\n    \"type\": \"module\",\n    \"main\": \"dist/index.js\",\n    \"module\": \"dist/index.mjs\",\n    \"types\": \"dist/index.d.ts\",\n    \"files\": [\"dist\"],\n    \"scripts\": {\n        \"build\": \"tsc\",\n        \"format\": \"prettier --write \\\"*.{ts,js,cjs,json}\\\"\",\n        \"lint\": \"eslint . --fix\",\n        \"prepublishOnly\": \"npm run build\",\n        \"test\": \"vitest\"\n    },\n    \"devDependencies\": {\n        \"@eslint/js\": \"^9.33.0\",\n        \"@typescript-eslint/parser\": \"^8.39.1\",\n        \"eslint\": \"^9.33.0\",\n        \"eslint-config-prettier\": \"^10.1.8\",\n        \"globals\": \"^16.3.0\",\n        \"prettier\": \"^3.6.2\",\n        \"prettier-plugin-jsdoc\": \"^1.3.3\",\n        \"typescript\": \"^5.9.2\",\n        \"typescript-eslint\": \"^8.39.1\",\n        \"vite\": \"^7.1.2\",\n        \"vitest\": \"^1.0.0\"\n    },\n    \"engines\": {\n        \"node\": \">=22\"\n    },\n    \"typeScriptVersion\": \"5.0\"\n}\n",
    ".prettierrc.js": "// This file configures Prettier, a code formatter.\n\nexport default {\n    plugins: [\"prettier-plugin-jsdoc\"],\n    arrowParens: \"avoid\",\n    bracketSameLine: true,\n    bracketSpacing: true,\n    embeddedLanguageFormatting: \"auto\",\n    endOfLine: \"auto\",\n    htmlWhitespaceSensitivity: \"css\",\n    insertPragma: false,\n    jsxSingleQuote: false,\n    printWidth: 80,\n    proseWrap: \"always\",\n    quoteProps: \"as-needed\",\n    semi: true,\n    singleAttributePerLine: false,\n    singleQuote: false,\n    tabWidth: 4,\n    trailingComma: \"es5\",\n    useTabs: false,\n    overrides: [\n        {\n            files: \"*.ts\",\n            options: {\n                parser: \"typescript\",\n            },\n        },\n        {\n            files: \"*.json\",\n            options: {\n                parser: \"json\",\n            },\n        },\n        {\n            files: \"*.md\",\n            options: {\n                parser: \"markdown\",\n            },\n        },\n        {\n            files: [\"*.yml\", \"*.yaml\"],\n            options: {\n                parser: \"yaml\",\n            },\n        },\n    ],\n};\n",
    "tsconfig.json": "{\n    \"compilerOptions\": {\n        \"rootDir\": \"./src\",\n        \"outDir\": \"./dist\",\n        \"module\": \"esnext\",\n        \"target\": \"esnext\",\n        \"lib\": [\"ESNext\"],\n        \"declaration\": true,\n        \"strict\": true,\n        \"esModuleInterop\": true,\n        \"skipLibCheck\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"moduleResolution\": \"node\"\n    },\n    \"include\": [\"src/index.ts\"],\n    \"exclude\": [\"node_modules\", \"dist\", \"src/index.test.ts\"]\n}\n",
    "eslint.config.js": "// eslint.config.js\nimport prettier from \"eslint-config-prettier\";\nimport globals from \"globals\";\nimport js from \"@eslint/js\";\nimport ts from \"typescript-eslint\";\nimport { globalIgnores } from \"eslint/config\";\n\nexport default ts.config([\n    globalIgnores([\"dist\", \"node_modules\"]),\n    {\n        files: [\"**/*.ts\"],\n        extends: [prettier, js.configs.recommended, ts.configs.recommended],\n        languageOptions: {\n            ecmaVersion: \"latest\",\n            sourceType: \"module\",\n\n            globals: globals.browser,\n        },\n\n        rules: {\n            // \"no-console\": \"warn\",\n            \"no-unused-vars\": \"off\",\n            \"@typescript-eslint/no-unused-vars\": \"off\",\n            \"no-var\": \"warn\",\n            \"object-shorthand\": [\"warn\", \"properties\"],\n\n            eqeqeq: [\"error\", \"always\", { null: \"ignore\" }],\n\n            \"lines-between-class-members\": [\n                \"error\",\n                \"always\",\n                { exceptAfterSingleLine: true },\n            ],\n\n            \"spaced-comment\": [\n                \"error\",\n                \"always\",\n                {\n                    line: { markers: [\"*package\", \"!\", \"/\", \",\", \"=\"] },\n                    block: {\n                        balanced: true,\n                        markers: [\n                            \"*package\",\n                            \"!\",\n                            \",\",\n                            \":\",\n                            \"::\",\n                            \"flow-include\",\n                        ],\n                        exceptions: [\"*\"],\n                    },\n                },\n            ],\n            // \"symbol-description\": \"error\",\n        },\n    },\n]);\n",
    "vitest.config.ts": "import { defineConfig } from \"vitest/config\";\n\nexport default defineConfig({\n    test: {\n        // Enable type checking during tests\n        typecheck: {\n            tsconfig: \"./tsconfig.json\",\n        },\n    },\n});\n",
    
}